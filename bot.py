import random
import psycopg2
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
import os
from dotenv import load_dotenv
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")
DB_NAME = os.getenv("DB_NAME")
TOKEN = os.getenv("TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'dbname': DB_NAME,  # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    'user': DB_USER,  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    'password': DB_PASSWORD,  # –ü–∞—Ä–æ–ª—å
    'host': DB_HOST,  # –•–æ—Å—Ç
    'port': DB_PORT  # –ü–æ—Ä—Ç
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
state_storage = StateMemoryStorage()
bot = TeleBot(TOKEN, state_storage=state_storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return psycopg2.connect(**DB_CONFIG)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_random_word(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏–∑—É—á–∞–ª
        cursor.execute('''
            SELECT w.word_id, w.word, w.translation
            FROM words w
            WHERE w.word_id NOT IN (
                SELECT uw.word_id
                FROM user_words uw
                WHERE uw.user_id = %s
            )
            ORDER BY RANDOM()
            LIMIT 1
        ''', (user_id,))
        word = cursor.fetchone()
        return word
    finally:
        cursor.close()
        conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
def get_other_words(word_id, count=4):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            SELECT word
            FROM words
            WHERE word_id != %s
            ORDER BY RANDOM()
            LIMIT %s
        ''', (word_id, count))
        words = cursor.fetchall()
        return [row[0] for row in words]
    finally:
        cursor.close()
        conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –∏–∑—É—á–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user_word(user_id, word_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO user_words (user_id, word_id)
            VALUES (%s, %s)
            ON CONFLICT (user_id, word_id) DO NOTHING
        ''', (user_id, word_id))
        conn.commit()
    finally:
        cursor.close()
        conn.close()

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_user_word(user_id, word_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            DELETE FROM user_words
            WHERE user_id = %s AND word_id = %s
        ''', (user_id, word_id))
        conn.commit()
    finally:
        cursor.close()
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /cards
@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO users (user_id, username)
            VALUES (%s, %s)
            ON CONFLICT (user_id) DO NOTHING
        ''', (user_id, username))
        conn.commit()
    finally:
        cursor.close()
        conn.close()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
    word = get_random_word(user_id)
    if not word:
        bot.send_message(message.chat.id, "–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    other_words = get_other_words(word[0])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons = [types.KeyboardButton(word[1])]  # word[1] - —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    buttons.extend(types.KeyboardButton(w) for w in other_words)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])
    markup.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {word[2]}"  # word[2] - –ø–µ—Ä–µ–≤–æ–¥
    bot.send_message(message.chat.id, greeting, reply_markup=markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = word[1]  # word[1] - —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        data['translate_word'] = word[2]  # word[2] - –ø–µ—Ä–µ–≤–æ–¥
        data['word_id'] = word[0]  # word[0] - word_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—å—à–µ ‚è≠"
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: Apple –Ø–±–ª–æ–∫–æ):")
    bot.register_next_step_handler(message, process_add_word)

def process_add_word(message):
    try:
        word, translation = message.text.split(maxsplit=1)
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('''
                INSERT INTO words (word, translation)
                VALUES (%s, %s)
                ON CONFLICT (word) DO NOTHING
            ''', (word, translation))
            conn.commit()
            bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            cursor.close()
            conn.close()
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô"
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        word_id = data['word_id']
        delete_user_word(message.from_user.id, word_id)
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{data['target_word']}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑—É—á–µ–Ω–Ω—ã—Ö.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞)
@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if text == data['target_word']:
            add_user_word(message.from_user.id, data['word_id'])
            hint = f"–û—Ç–ª–∏—á–Ω–æ!‚ù§\n{data['target_word']} -> {data['translate_word']}"
        else:
            hint = f"–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}"
    bot.send_message(message.chat.id, hint)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.add_custom_filter(custom_filters.StateFilter(bot))
    bot.infinity_polling(skip_pending=True)