import telebot
from db_handlers import *
import logging
from telebot import types
from init_db import init_db

import os
from dotenv import load_dotenv
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")
DB_NAME = os.getenv("DB_NAME")
TOKEN = os.getenv("TOKEN")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TOKEN)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_add = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
    btn_delete = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ')
    btn_quiz = types.KeyboardButton('–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')
    markup.add(btn_add, btn_delete, btn_quiz)
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (—Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
def create_quiz_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_end_quiz = types.KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')
    markup.add(btn_end_quiz)
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info(f"User {message.from_user.id} started the bot.")
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
def add_word_handler(message):
    logger.info(f"User {message.from_user.id} wants to add a word.")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–ª–æ–≤–æ –ø–µ—Ä–µ–≤–æ–¥")

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ')
def delete_word_handler(message):
    logger.info(f"User {message.from_user.id} wants to delete a word.")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')
def quiz_handler(message):
    logger.info(f"User {message.from_user.id} started a quiz.")
    start_quiz(message)

def start_quiz(message):
    words = get_words_for_quiz(message.from_user.id)
    if not words:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    question_word, correct_translation = random.choice(words)
    other_translations = [translation for _, translation in words if translation != correct_translation]
    random_translations = random.sample(other_translations, 3)  # 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
    all_translations = random_translations + [correct_translation]
    random.shuffle(all_translations)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    markup = create_quiz_keyboard()
    for translation in all_translations:
        markup.add(types.KeyboardButton(translation))

    bot.send_message(message.chat.id, f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ '{question_word}'?", reply_markup=markup)
    bot.register_next_step_handler(message, check_answer, correct_translation)

def check_answer(message, correct_translation):
    if message.text == '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É':
        bot.send_message(
            message.chat.id,
            "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=create_main_keyboard()
        )
        return

    if message.text == correct_translation:
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
    else:
        bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_translation}.")

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    start_quiz(message)

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    if len(message.text.split()) == 2:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
        word, translation = message.text.split()
        add_user_word(message.from_user.id, word, translation)
        logger.info(f"User {message.from_user.id} added word: {word} -> {translation}")
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word}' —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{translation}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    elif len(message.text.split()) == 1:  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
        word = message.text
        delete_user_word(message.from_user.id, word)
        logger.info(f"User {message.from_user.id} deleted word: {word}")
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

if __name__ == "__main__":
    init_db()
    logger.info("Bot started polling.")
    bot.polling()